package GUI;

import commands.Command;
import commands.Show;
import network.UDP;
import org.json.simple.JSONObject;
import utilities.Serialization;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;

import static java.awt.Frame.MAXIMIZED_BOTH;

public class MainForm {
    private JPanel mainPanel;
    private JComboBox languages;
    private JLabel user;
    private JButton visualization;
    private JButton commander;
    private JButton table;
    private JLabel hello;
    private final JFrame main;
    public UDP udp;
    public JSONObject serverCommands;
    Map<String, Command> commands;
    private String language;
    final ResourceBundle bundleRu = ResourceBundle
            .getBundle("resources.resource", new Locale("ru", "RU"));
    final ResourceBundle bundleDe = ResourceBundle
            .getBundle("resources.resource", new Locale("tr", "TR"));
    final ResourceBundle bundleEs = ResourceBundle
            .getBundle("resources.resource", new Locale("es", "MX"));
    final ResourceBundle bundleLt = ResourceBundle
            .getBundle("resources.resource", new Locale("bg", "BG"));

    public MainForm(Map<String, Command> commands, JFrame parent, Object languageIn, UDP udp, JSONObject serverCommands) {
        this.udp = udp;
        this.serverCommands = serverCommands;
        this.commands = commands;

        if (languageIn == null) languageIn = "Russian";
        this.language = languageIn.toString();
        main = new JFrame();
        main.setSize(600, 400);
        main.setExtendedState(MAXIMIZED_BOTH);
        user.setText(UDP.LOGIN);
        commander.addActionListener(new CommanderListener());
        table.addActionListener(new TableListener());
        visualization.addActionListener(new VisualisationListener());
        main.add(mainPanel);
        main.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        main.setLocationRelativeTo(null);
        main.setVisible(true);

        languages.addActionListener(e -> {
            language = languages.getSelectedItem().toString();
            setupSelectedLanguages(language);
        });
        languages.setSelectedItem(languageIn);
    }

    public void setupSelectedLanguages(String language) {
        switch (language) {
            case "Russian" -> {
                hello.setText(bundleRu.getString("hi"));
                table.setText(bundleRu.getString("tableButton"));
                visualization.setText(bundleRu.getString("visualButton"));
                commander.setText(bundleRu.getString("commandButton"));

            }
            case "Turkish" -> {
                hello.setText(bundleDe.getString("hi"));
                table.setText(bundleDe.getString("tableButton"));
                visualization.setText(bundleDe.getString("visualButton"));
                commander.setText(bundleDe.getString("commandButton"));

            }
            case "Bolgarian" -> {
                hello.setText(bundleLt.getString("hi"));
                table.setText(bundleLt.getString("tableButton"));
                visualization.setText(bundleLt.getString("visualButton"));
                commander.setText(bundleLt.getString("commandButton"));

            }
            case "Spanish (Mexico)" -> {
                hello.setText(bundleEs.getString("hi"));
                table.setText(bundleEs.getString("tableButton"));
                visualization.setText(bundleEs.getString("visualButton"));
                commander.setText(bundleEs.getString("commandButton"));

            }
        }
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.setPreferredSize(new Dimension(150, 70));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        mainPanel.add(panel1, BorderLayout.NORTH);
        languages = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Russian");
        defaultComboBoxModel1.addElement("Turkish");
        defaultComboBoxModel1.addElement("Bulgarian");
        defaultComboBoxModel1.addElement("Spanish (Mexico)");
        languages.setModel(defaultComboBoxModel1);
        panel1.add(languages, BorderLayout.WEST);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setAlignmentX(0.5f);
        panel1.add(panel2, BorderLayout.EAST);
        user = new JLabel();
        user.setText("Label");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(user, gbc);
        hello = new JLabel();
        hello.setInheritsPopupMenu(false);
        hello.setText("Приветствуем:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(hello, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel2.add(panel3, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer1, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        mainPanel.add(panel4, BorderLayout.CENTER);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panel4.add(panel5, gbc);
        table = new JButton();
        table.setPreferredSize(new Dimension(220, 30));
        table.setText("Таблица");
        panel5.add(table);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        panel4.add(panel6, gbc);
        visualization = new JButton();
        visualization.setPreferredSize(new Dimension(220, 30));
        visualization.setText("Визуализация");
        panel6.add(visualization);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel4.add(panel7, gbc);
        commander = new JButton();
        commander.setPreferredSize(new Dimension(220, 30));
        commander.setText("Выполнение команд");
        panel7.add(commander);
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridBagLayout());
        mainPanel.add(panel8, BorderLayout.SOUTH);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    class TableListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            TableForm tableForm = new TableForm(main, language, udp, serverCommands);
        }
    }

    class VisualisationListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            Visualization vis = new Visualization();
        }
    }

    class CommanderListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            CommanderForm commanderForm = new CommanderForm(udp, serverCommands, commands, main, language);
        }
    }

}
